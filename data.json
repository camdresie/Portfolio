{ 
    "projects": [
        { 
        "id": "0",
        "project_name": "Random Quote Generator",
        "description": "This project takes in an array of quotes with information pertinent to those quotes (who said it, where they said it, when they said it, and a category for the quote). The function in the program then randomizes the quotes and selects one. As it does this, the background color for the page changes to a random color. If a user doesn't hit the button to get a random quote within ten seconds, the page will automatically select a new random quote.",
        "technologies": [
            "HTML", 
            "CSS", 
            "JavaScript",
            "Functional Programming"
        ],
        "live_link": "https://criemensnider.github.io/Random-Quote-Generator/",
        "github_link": "https://github.com/criemensnider/Random-Quote-Generator",
        "image_urls": [
            "./static/images/0/randomquote0square.jpg",
            "./static/images/0/randomquote1.JPG",
            "./static/images/0/randomquote2.JPG",
            "./static/images/0/randomquote3.JPG"
        ]
        }, 
        { 
        "id": "1",
        "project_name": "Paginated Student List",
        "description": "For this project, I utilized vanilla JavaScript (no libraries) to create a dynamic pagination system for a list. My code appends a list of links to the bottom of the page that allows a user to navigate through the full list of students 10 at a time. The list is dynamic, so it updates automatically depending on the size of the list input. After completing the initial code mentioned above, I elected to add a search bar function. It is appended to the DOM using vanilla JavaScript. There are two event listeners, one on the search button and one on the search text input field. As a user types, the search function dynamically searches through each name on the list to see if there are any matches. If the user inputs a string of text that matches a user's name in entirety or in part, the function displays that name and hides all others. If no matches are found, a message is displayed telling the user to try another name as no matches were found.",
        "technologies": [
            "HTML",
            "CSS",
            "JavaScript",
            "Dynamic Pagination and Searchbar"
        ],
        "live_link": "https://criemensnider.github.io/List-Pagination-and-Filtering/",
        "github_link": "https://github.com/criemensnider/List-Pagination-and-Filtering",
        "image_urls": [
            "./static/images/1/list0square.jpg",
            "./static/images/1/list1.JPG",
            "./static/images/1/list2.JPG",
            "./static/images/1/list3.JPG",
            "./static/images/1/list4.JPG"
        ]
        },
        { 
        "id": "2",
        "project_name": "Conference Signup Form",
        "description": "This is a signup form for a fictional conference I completed using vanilla JavaScript. It is a dynamic form that allows users to input various data and receive feedback on what they have entered. If a user does not enter correct data, the form will be prevented from submitting by checking user inputs against RegEx values. The user is then notified of the data that they did not correctly enter through a list of error messages below the submit button and a red border on the section that is incorrect. If the user does not have JavaScript functioning on their browser, the form will still function.",
        "technologies": [
            "HTML",
            "CSS",
            "JavaScript",
            "RegEx",
            "Responsive Forms"
        ],
        "live_link": "https://criemensnider.github.io/Form-Validation/",
        "github_link": "https://github.com/criemensnider/Form-Validation",
        "image_urls": [
            "./static/images/2/form0square.jpg",
            "./static/images/2/form1.JPG",
            "./static/images/2/form2.JPG",
            "./static/images/2/form3.JPG",
            "./static/images/2/form4.JPG"
        ]
        },
        { 
        "id": "3",
        "project_name": "Phrase Hunter Game",
        "description": "This project uses object-oriented vanilla JavaScript to create a hangman-like game. Players use the onscreen keyboard to make their guesses. If a guess is incorrect, the player loses a life (the hearts at the bottom). The player has a total of five tries in which to guess the phrase. If they do not, a losing message is presented and they can restart the game. If they guess the phrase, then a winning message is displayed and they can generate a new random phrase to guess.",
        "technologies": [
            "HTML",
            "CSS",
            "JavaScript",
            "Object-Oriented Programming"
        ],
        "live_link": "https://criemensnider.github.io/Phrase-Hunter-Word-Guessing-Game/",
        "github_link": "https://github.com/criemensnider/Phrase-Hunter-Word-Guessing-Game",
        "image_urls": [
            "./static/images/3/phrase0square.jpg",
            "./static/images/3/phrase1.JPG",
            "./static/images/3/phrase2.JPG",
            "./static/images/3/phrase3.JPG",
            "./static/images/3/phrase4.JPG",
            "./static/images/3/phrase5.JPG"
        ]
        },
        { 
        "id": "4",
        "project_name": "Employee Directory",
        "description": "This project utilizes a web API to pull data on twelve random employees including their photo, name, birthday, address, city, state, and more for display in an employee directory. The project utilizes JavaScript's fetch() method and promises to make the code more readable and cut down on callback hell. The twelve employees are initially displayed in a gallery-type directory. If an individual employee is clicked on, then a modal tile with more detailed information about that employee is rendered.",
        "technologies": [
            "HTML",
            "CSS",
            "JavaScript",
            "API",
            "JavaScript Promises",
            "jQuery"
        ],
        "live_link": "https://criemensnider.github.io/Employee-Directory-App---Web-API/",
        "github_link": "https://github.com/criemensnider/Employee-Directory-App---Web-API",
        "image_urls": [
            "./static/images/4/directory0square.jpg",
            "./static/images/4/directory1.JPG",
            "./static/images/4/directory2.JPG",
            "./static/images/4/directory3.JPG"
        ]
        },
        { 
            "id": "5",
            "project_name": "Connect Four Game",
            "description": "This project utilizes object-oriented JavaScript to complete a connect four game. In this program, heavy use is made of JavaScript's class constructors to create each aspect of the game (the players, tokens, board, spaces, and game itself). The program is highly modular, with each aspect coded in its own file for high readability. When the game begins, the first player uses the arrow keys to control their token and then drops the token in the slot of their choosing. The game alternates between both players until one has placed four tokens in a row. They are then declared the winner! If both players play all their tokens and there is no winner, a message is displayed. After either ending event, a message is displayed telling the user to refresh the browser to start a new game.",
            "technologies": [
                "HTML",
                "CSS",
                "JavaScript",
                "JavaScript Classes",
                "jQuery"
            ],
            "live_link": "https://criemensnider.github.io/Connect-4-Game/",
            "github_link": "https://github.com/criemensnider/Connect-4-Game",
            "image_urls": [
                "./static/images/5/connect0square.jpg",
                "./static/images/5/connect1.JPG",
                "./static/images/5/connect2.JPG",
                "./static/images/5/connect3.JPG"
            ]
            }
    ]

}